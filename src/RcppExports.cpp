// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generatePrime
int generatePrime(int n);
RcppExport SEXP _RSAPackage_generatePrime(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generatePrime(n));
    return rcpp_result_gen;
END_RCPP
}
// messageEncrypt
CharacterVector messageEncrypt(const CharacterVector plaintext, int e, int n);
RcppExport SEXP _RSAPackage_messageEncrypt(SEXP plaintextSEXP, SEXP eSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type plaintext(plaintextSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(messageEncrypt(plaintext, e, n));
    return rcpp_result_gen;
END_RCPP
}
// messageDecrypt
CharacterVector messageDecrypt(const CharacterVector ciphertext, int d, int n);
RcppExport SEXP _RSAPackage_messageDecrypt(SEXP ciphertextSEXP, SEXP dSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type ciphertext(ciphertextSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(messageDecrypt(ciphertext, d, n));
    return rcpp_result_gen;
END_RCPP
}
// keyGenerator
std::tuple<int, int, int> keyGenerator(int p, int q);
RcppExport SEXP _RSAPackage_keyGenerator(SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(keyGenerator(p, q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSAPackage_generatePrime", (DL_FUNC) &_RSAPackage_generatePrime, 1},
    {"_RSAPackage_messageEncrypt", (DL_FUNC) &_RSAPackage_messageEncrypt, 3},
    {"_RSAPackage_messageDecrypt", (DL_FUNC) &_RSAPackage_messageDecrypt, 3},
    {"_RSAPackage_keyGenerator", (DL_FUNC) &_RSAPackage_keyGenerator, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSAPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
