// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// NumberGenerator
int NumberGenerator(int n);
RcppExport SEXP _RSAPackage_NumberGenerator(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(NumberGenerator(n));
    return rcpp_result_gen;
END_RCPP
}
// gcd
int gcd(int a, int b);
RcppExport SEXP _RSAPackage_gcd(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gcd(a, b));
    return rcpp_result_gen;
END_RCPP
}
// LowLevelPrimeCheck
bool LowLevelPrimeCheck(int number);
RcppExport SEXP _RSAPackage_LowLevelPrimeCheck(SEXP numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    rcpp_result_gen = Rcpp::wrap(LowLevelPrimeCheck(number));
    return rcpp_result_gen;
END_RCPP
}
// PrimeCheck
bool PrimeCheck(int number);
RcppExport SEXP _RSAPackage_PrimeCheck(SEXP numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    rcpp_result_gen = Rcpp::wrap(PrimeCheck(number));
    return rcpp_result_gen;
END_RCPP
}
// messageEncrypt
CharacterVector messageEncrypt(const CharacterVector plaintext, int e, int n);
RcppExport SEXP _RSAPackage_messageEncrypt(SEXP plaintextSEXP, SEXP eSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type plaintext(plaintextSEXP);
    Rcpp::traits::input_parameter< int >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(messageEncrypt(plaintext, e, n));
    return rcpp_result_gen;
END_RCPP
}
// messageDecrypt
CharacterVector messageDecrypt(const CharacterVector ciphertext, int d, int n);
RcppExport SEXP _RSAPackage_messageDecrypt(SEXP ciphertextSEXP, SEXP dSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type ciphertext(ciphertextSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(messageDecrypt(ciphertext, d, n));
    return rcpp_result_gen;
END_RCPP
}
// int>keyGenerator
std::tuple<int, int, int>keyGenerator(int p, int q);
RcppExport SEXP _RSAPackage_int>keyGenerator(SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(int>keyGenerator(p, q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSAPackage_NumberGenerator", (DL_FUNC) &_RSAPackage_NumberGenerator, 1},
    {"_RSAPackage_gcd", (DL_FUNC) &_RSAPackage_gcd, 2},
    {"_RSAPackage_LowLevelPrimeCheck", (DL_FUNC) &_RSAPackage_LowLevelPrimeCheck, 1},
    {"_RSAPackage_PrimeCheck", (DL_FUNC) &_RSAPackage_PrimeCheck, 1},
    {"_RSAPackage_messageEncrypt", (DL_FUNC) &_RSAPackage_messageEncrypt, 3},
    {"_RSAPackage_messageDecrypt", (DL_FUNC) &_RSAPackage_messageDecrypt, 3},
    {"_RSAPackage_int>keyGenerator", (DL_FUNC) &_RSAPackage_int>keyGenerator, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSAPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
